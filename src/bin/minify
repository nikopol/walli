#!/usr/bin/env perl
#html/php minifier
#niko 2012-2013
#use:  ./minify < tof.php > ../index.php

use strict;
use warnings;
use JSON;
use LWP::UserAgent;
use MIME::Base64;

die "usage: $0 [-wc] < wally.php > wally-allinone-minified.php\n" if grep { /--?(h|help)/ } @ARGV;
my $woclosure = grep { /--?(wc|woclosure|withoutclosure)/ } @ARGV;

my $read = 0;
my $mini = '';

sub load {
	my( $file, $pfx ) = @_;
	$pfx = '' unless $pfx;
	warn $pfx."loading $file\n";
	open(FH, $file) or die "unable to read $file\n";
	$read += -s $file;
	if( wantarray ){
		my @lines = <FH>;
		close FH;
		return @lines;
	}
	my $buf = '';
	$buf .= $_ while <FH>;
	close FH;
	$buf;
}

sub imagedata {
	my( $file, $pfx ) = @_;
	$pfx = '' unless $pfx;
	return $file if $file =~ /^(http|data\:)/i;
	my $ext = ( $file =~ /\.([^\.]+)$/ ) ? $1 : '?';
	my $raw = load $file, $pfx;
	my $len = length $raw;
	my $data = encode_base64($raw,'');
	my $zip = length $data;
	warn "$pfx$file encoded from $len to $zip (",int(100*($len-$zip)/$len),"%)\n";
	my $mime = 
		$ext =~ /jpe?g|gif|png/i ? 'image/'.$ext :
		$ext =~ /ttf|woff|eot/i ? 'application/x-font-'.$ext :
		'application/octet-stream';
	'data:'.$mime.';base64,'.$data;
}

sub php_minify {
	my $file = shift;
	my @raw = load $file;
	warn "$file loaded with ".scalar @raw." lines\n";
	@raw = 
		grep { $_ }
		map { chomp; $_ } 
		map { s/<\?php|\?>//gi; $_ }
		@raw;
}

sub css_minify {
	my( $file, $pfx ) = @_;
	$pfx = '' unless $pfx;
	my @raw = load $file, $pfx;
	$pfx .= '  | ';
	my $path = $file;
	$path =~ s/[^\/]+$//g;
	$path = './' unless $path;
	#remove comments
	my $law = join('', @raw);
	$law =~ s|/\*.*?\*/||gs; 
	my @css = map { s/(^\s+|\s+$)//g; $_ } split(/\n/,$law);
	#minify
	my $len  = 0;
	my $mini = '';
	for my $l ( @css ){
		$len += 1+length($l);
		if( $l =~ m/\@import\s+url\(([^\)]+)/i ) {
			#embed css import
			my $url = $1;
			$l = $url =~ /\.css$/i
				? join("\n",css_minify($path.$url,$pfx))."\n"
				: "$l\n";
		} elsif( $l =~ m/url\(\'?\"?([^\)'"]+)\'?\"?\)/ ){
			#embed local images
			my $url = $1;
			if( $url !~ /^(http|data\:)/i && $url =~ /\.(jpe?g|gif|png)$/i ) {
				my $b64 = imagedata $path.$url, $pfx;
				$l =~ s/$url/$b64/;
			}
		}
		$mini .= $l if $l;
	}
	$mini =~ s/\r+//g;         #remove \r
	$mini =~ s/(^\s+|\s*$)//g; #remove lead/end spaces
	$mini =~ s/ *\: */:/g;   #remove spaces around :
	$mini =~ s/\; +/;/g;      #remove spaces after ;
	$mini =~ s/\s*\{\s*/{/g;   #remove spaces around {
	$mini =~ s/\s*\}\s*/}/g;   #remove spaces around }
	$mini =~ s/ +/ /g;         #reduce multiple spaces 
	$mini =~ s/;\s*\}/}/g;     #remove ; ending a block
	$mini =~ s/\}\s*/}\n/g;    #add line return after a block
	my $zip = length($mini);
	warn "$pfx$file minified from $len to $zip (",int(100*($len-$zip)/$len),"%)\n";
	split /\n+/,$mini;
}

sub css_merge {
	my @css = @_;
	my @ok;
	my %at;
	
	# sub proprietary { 
	# 	shift =~Â /-(webkit|o|moz)-/
	# }
	# sub vsplit {
	# 	my $v = shift;
	# 	$v =~ s/url\(([^;\)]+);/url($1|/gi; #hack for ; in url(data:...;...)
	# 	my %h;
	# 	for(split /;/,$v) {
	# 		$h{$1} = $2 if /^\s*([^\:\s]+)\s*\:\s*(.+)/;
	# 	}
	# 	\%h;
	# }
	# sub vmerge {
	# 	my( $s, $d ) = @_;
	# 	for my $k ( keys %$d ) {
	# 	}
	# 	$s;
	# }

	for my $l ( @css ) {
		next unless $l;
		if( $l =~ /^\s*([^:\@%]+?)\s*{\s*(.+)\s*}\s*$/ ) {
			my $a = $1;
			my $v = $2;
			$a =~ s/(^\s|\s$)//g;
			$v =~ s/(^\s|\s$)//g;
			next if $v eq "";
			if( exists $at{$a} ) {
				$v = $at{$a}{v}.';'.$v;
				$ok[$at{$a}{n}] = $a.'{'.$v.'}';
				#warn "merging $a\n";
			} else {
				$at{$a} = { n=>scalar @ok, v=>$v };
				push @ok, $a.'{'.$v.'}';
				#warn "adding $a ",scalar keys %at,"\n";
			}
		} else {
			push @ok, $l;
		}
	}
	@ok;
}

sub js_minify {
	my $file = shift;
	my $js = load $file;
	unless( $woclosure || $file =~ /min\.js$/i ) {
		my $len = length $js;
		my $ua = LWP::UserAgent->new;
		my $res = $ua->post(
			'http://closure-compiler.appspot.com/compile', [
				'output_info'   => 'compiled_code',
				'output_info'   => 'errors',
				output_format   => 'json',
				warning_level   => 'quiet',
				#compilation_level => 'advanced_optimizations',
				js_code         => $js,
			]
		);
		if( $res->is_success ) {
			my $c = from_json($res->decoded_content);
			if(exists $c->{serverErrors}){
				warn 'ERROR #',$_->{'code'},': ',$_->{error},"\n"
					foreach @{$c->{serverErrors}};
			}
			if($c->{errors} && @{$c->{errors}}){
				warn $_->{error},' line ',$_->{lineno},' near ',$_->{line},"\n"
					foreach @{$c->{errors}};
				die "break on error\n";
			}
			if($c->{compiledCode}) {
				$js = $c->{compiledCode};
				$js =~ s/[\r\n]+//;
				my $zip = length $js;
				warn "  | $file closured from $len to $zip (",int(100*($len-$zip)/$len),"%)\n";
			} else {
				warn "  | $file not closured\n";
			}
		} else {
			warn "  | $res->status_line \n";
		}
	}
	split /\r?\n+/,$js
}

for my $l ( <STDIN> ) {
	$read += length $l;
	if( $l =~ /^(\s*)<script[^\>]+src=[\'\"]([^\'\"]+)[\'\"]/i ) {
		my $pfx = $1;
		my $src = $2;
		$mini .= $src =~ /^http/i
			? $l
			: "$pfx<script>\n".
			  "$pfx\t".join("\n$pfx\t",js_minify($src))."\n".
			  "$pfx</script>\n";
	} elsif( $l =~ /^(\s*)<link[^\>]+href=[\'\"]([^\'\"]+\.css)[\'\"]/i ) {
		my $pfx = $1;
		my $src = $2;
		$mini .= $src =~ /^http/i
			? $l
			: "$pfx<style>\n".
			  "$pfx\t".join("\n$pfx\t",css_merge(css_minify($src)))."\n".
			  "$pfx</style>\n";
	} elsif( $l =~ /=['"]([^'"]+\.(jpg|png|gif))[\'\"]/i ) {
		my $file = $1;
		if( -s $file < 32768 ){
			my $data = imagedata $file;
			$l =~ s/$file/$data/;
		}
		$mini .= $l;
	} elsif( $l =~ /^([\s\t]*)\@?include\s*\(\s*['"]([^'"]+)/i ) {
		my $pfx = $1;
		my $src = $2;
		$mini .= $src eq 'config.inc.php'
			? $l
			: "$pfx".join("\n$pfx",php_minify($src))."\n";
	} else {
		$mini .= $l;
	}
}
my $zip = length $mini;
print $mini;
warn "done from $read to $zip (",$read?int(100*($read-$zip)/$read):'?',"%)\n";
